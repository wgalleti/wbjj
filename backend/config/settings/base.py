"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-t@k7#yb5u=)dd4gpb%p*%5^3-&m37xko4g6k8*7pws*bm(l!y&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS: list[str] = []


# Application definition

INSTALLED_APPS = [
    # Django Tenants DEVE ser o primeiro app para funcionar corretamente
    "django_tenants",
    "unfold",  # Django Unfold deve vir antes do admin
    "unfold.contrib.filters",  # Filtros aprimorados
    "unfold.contrib.forms",  # Formulários aprimorados
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "django_extensions",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "django_filters",
    "corsheaders",
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
    "health_check.contrib.psutil",
    # Local apps
    "apps.core",
    "apps.tenants",
    "apps.authentication",
    "apps.students",
    "apps.payments",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "apps.authentication.middleware.TenantMiddleware",  # PRIMEIRO! - Middleware de tenant OBRIGATÓRIO
    "apps.core.middleware.PermissionsPolicyMiddleware",  # Middleware para Permissions Policy
    "apps.core.middleware.SecurityHeadersMiddleware",  # Middleware para cabeçalhos de segurança
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware deve vir antes do CommonMiddleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "apps.authentication.middleware.SecurityAuthorizationMiddleware",  # Middleware de autorização e segurança
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Configurações adicionais do admin Django
ADMIN_SITE_HEADER = "Zenith Jiu Jitsu - Administração"
ADMIN_SITE_TITLE = "Zenith JJ Admin"
ADMIN_INDEX_TITLE = "Painel Administrativo"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Custom User Model
AUTH_USER_MODEL = "authentication.User"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "pt-BR"

TIME_ZONE = "America/Cuiaba"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR.parent / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Security Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "SAMEORIGIN"  # Mudando para SAMEORIGIN para permitir iframe no admin

# Django Unfold Configuration
UNFOLD = {
    "SITE_TITLE": "Zenith Jiu Jitsu",
    "SITE_HEADER": "Zenith JJ Admin",
    "SITE_URL": "/",
    "SITE_LOGO": "/static/images/logo.png",
    "SITE_ICON": {
        "light": "/static/images/logo.png",
        "dark": "/static/images/logo.png",
    },
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/png",
            "href": lambda request: request.build_absolute_uri(
                "/static/images/logo.png"
            ),
        },
    ],
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "ENVIRONMENT": None,
    "COLORS": {
        "primary": {
            "50": "255 255 240",  # Amarelo muito claro
            "100": "254 249 195",  # Amarelo claro
            "200": "254 240 138",  # Amarelo suave
            "300": "253 224 71",  # Amarelo médio
            "400": "250 204 21",  # Amarelo vibrante
            "500": "234 179 8",  # Amarelo principal (como no logo)
            "600": "202 138 4",  # Amarelo escuro
            "700": "161 98 7",  # Amarelo mais escuro
            "800": "133 77 14",  # Amarelo muito escuro
            "900": "113 63 18",  # Amarelo quase laranja
            "950": "66 32 6",  # Amarelo mais escuro
        }
    },
    "THEME": "light",  # Define tema padrão como claro para destacar as cores amarelo/azul
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        # Removendo navegação customizada temporariamente para resolver problema
        # "navigation": [...]
    },
}

# =============================================================================
# DJANGO REST FRAMEWORK CONFIGURATION
# =============================================================================

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "EXCEPTION_HANDLER": "apps.core.exceptions.custom_exception_handler",
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "ALLOWED_VERSIONS": ["v1"],
    "VERSION_PARAM": "version",
}

# =============================================================================
# JWT CONFIGURATION
# =============================================================================

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

CORS_ALLOW_CREDENTIALS = True

# CORS Origins - diferentes por ambiente
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Frontend Vue.js development
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Frontend alternativo
    "http://127.0.0.1:8080",
    "https://app.wbjj.com",  # Production frontend
    "https://admin.wbjj.com",  # Production admin
]

# Headers personalizados permitidos
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "x-tenant-id",  # Header customizado para tenant
    "x-api-key",  # API key para integrações
    "x-request-id",  # Request ID para tracking
    "x-forwarded-for",  # IP forwarding
    "x-forwarded-proto",  # Protocol forwarding
    "cache-control",  # Cache headers
    "pragma",  # Cache headers
]

# Métodos HTTP permitidos
CORS_ALLOWED_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

# Headers expostos para o frontend
CORS_EXPOSE_HEADERS = [
    "content-type",
    "x-tenant-id",
    "x-total-count",
    "x-page-count",
    "x-request-id",
    "x-ratelimit-limit",
    "x-ratelimit-remaining",
    "x-ratelimit-reset",
]

# Configurações de cache para preflight requests
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# Configurações de segurança
CORS_ALLOW_ALL_ORIGINS = False  # NUNCA True em produção

# =============================================================================
# SPECTACULAR (OpenAPI/Swagger) CONFIGURATION
# =============================================================================

SPECTACULAR_SETTINGS = {
    "TITLE": "wBJJ API",
    "DESCRIPTION": """
    API REST para sistema de gestão de academias de jiu-jitsu com multitenancy.

    ## Autenticação
    Esta API utiliza JWT (JSON Web Tokens) para autenticação. Para acessar endpoints protegidos:

    1. Faça login em `/api/v1/auth/login/` com email e senha
    2. Use o token `access` no header: `Authorization: Bearer <token>`
    3. Tokens expiram em 60 minutos, use `/api/v1/auth/refresh/` para renovar

    ## Multitenancy
    Cada academia é um tenant separado. Inclua o header `X-Tenant-ID` em todas as requisições
    para isolar os dados corretamente.

    ## Paginação
    Listagens retornam 20 itens por página por padrão. Use os parâmetros:
    - `page`: número da página
    - `page_size`: itens por página (máximo 100)

    ## Filtros e Busca
    - `search`: busca textual nos campos configurados
    - `ordering`: ordenação (use "-" para decrescente)
    - Filtros específicos por campo conforme documentado
    """,
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SCHEMA_PATH_PREFIX": "/api/v1/",
    "SCHEMA_PATH_PREFIX_TRIM": True,
    "SERVERS": [
        {"url": "http://localhost:8000", "description": "Development server"},
        {"url": "https://api.wbjj.com", "description": "Production server"},
    ],
    "TAGS": [
        {
            "name": "authentication",
            "description": "Autenticação JWT e gestão de usuários",
        },
        {"name": "students", "description": "Gestão de alunos, graduações e presenças"},
        {"name": "payments", "description": "Sistema financeiro e cobrança"},
        {"name": "tenants", "description": "Gestão de academias e configurações"},
        {"name": "core", "description": "Funcionalidades base e monitoramento"},
    ],
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": False,
    "ENUM_NAME_OVERRIDES": {
        "BeltChoices": "apps.students.models.Student.BELT_CHOICES",
        "StatusChoices": "apps.students.models.Student.STATUS_CHOICES",
    },
    "PREPROCESSING_HOOKS": [
        "apps.core.openapi.preprocess_filter_specs",
    ],
    "POSTPROCESSING_HOOKS": [
        "apps.core.openapi.postprocess_schema_enums",
    ],
    "EXTENSIONS_INFO": {
        "x-tenant-header": {
            "description": "Header para identificação do tenant",
            "required": True,
        }
    },
    # Configurações de UI
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayRequestDuration": True,
        "docExpansion": "none",
        "filter": True,
        "requestInterceptor": "(request) => { request.headers['X-Tenant-ID'] = localStorage.getItem('tenantId') || ''; return request; }",
    },
    "REDOC_UI_SETTINGS": {
        "expandResponses": "200,201",
        "requiredPropsFirst": True,
        "noAutoAuth": False,
        "hideDownloadButton": False,
    },
    # Configurações de segurança
    "SECURITY": [{"jwtAuth": []}],
    # Configurações de exemplo
    "EXAMPLES": {
        "student_create": {
            "summary": "Criar novo aluno",
            "description": "Exemplo de criação de aluno com dados completos",
            "value": {
                "email": "joao.silva@email.com",
                "first_name": "João",
                "last_name": "Silva",
                "phone": "(11) 99999-9999",
                "belt_color": "white",
                "status": "active",
                "birth_date": "1990-01-15",
                "address": "Rua das Flores, 123",
                "emergency_contact": "Maria Silva - (11) 88888-8888",
            },
        },
        "payment_create": {
            "summary": "Registrar pagamento",
            "description": "Exemplo de registro de pagamento de mensalidade",
            "value": {
                "invoice": "123e4567-e89b-12d3-a456-426614174000",
                "payment_method": "123e4567-e89b-12d3-a456-426614174001",
                "amount": "150.00",
                "payment_date": "2024-01-15",
                "notes": "Pagamento de mensalidade - Janeiro 2024",
            },
        },
    },
}

# =============================================================================
# HEALTH CHECK CONFIGURATION
# =============================================================================

HEALTH_CHECK = {
    "DISK_USAGE_MAX": 90,  # % máximo de uso do disco
    "MEMORY_MIN": 100,  # MB mínimo de memória livre
}

# =============================================================================
# CAMEL CASE CONFIGURATION
# =============================================================================

# JSON_CAMEL_CASE configuration is handled in REST_FRAMEWORK settings above

# =============================================================================
# DJANGO FILTER CONFIGURATION
# =============================================================================

DJANGO_FILTERS = {
    "DEFAULT_FILTER_OVERRIDES": {
        "UUIDField": {
            "filter_class": "django_filters.CharFilter",
            "extra": lambda f: {
                "lookup_expr": "iexact",
            },
        },
        "CharField": {
            "filter_class": "django_filters.CharFilter",
            "extra": lambda f: {
                "lookup_expr": "icontains",
            },
        },
        "TextField": {
            "filter_class": "django_filters.CharFilter",
            "extra": lambda f: {
                "lookup_expr": "icontains",
            },
        },
    },
}

# =============================================================================
# DJANGO TENANTS CONFIGURATION
# =============================================================================

# Model de tenant personalizado
TENANT_MODEL = "tenants.Tenant"

# Model de domínio (django-tenants usa o padrão se não especificado)
TENANT_DOMAIN_MODEL = "tenants.Domain"

# Apps que existem apenas no schema público (global)
SHARED_APPS = [
    "django_tenants",  # SEMPRE incluir no schema público
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps que precisam ser globais
    "rest_framework_simplejwt.token_blacklist",  # Token blacklist deve ser global
    # Apps do projeto que são globais
    "apps.core",
    "apps.tenants",  # Tenant management é global (inclui Domain)
    "apps.authentication",  # Auth é global
]

# Apps que existem apenas nos schemas de tenant
TENANT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps nos tenants
    "rest_framework",
    "rest_framework_simplejwt",
    # NOTA: token_blacklist está em SHARED_APPS, não aqui
    "drf_spectacular",
    "django_filters",
    "corsheaders",
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "health_check.contrib.migrations",
    "health_check.contrib.psutil",
    # Apps específicos por tenant
    "apps.core",
    "apps.students",  # Dados de alunos são por tenant
    "apps.payments",  # Dados financeiros são por tenant
]

# Schema público padrão
PUBLIC_SCHEMA_NAME = "public"

# Configurações de multitenancy
TENANT_LIMIT_SET_CALLS = True  # Otimização de performance

# Router obrigatório para django-tenants
DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)
