services:
  db:
    image: postgres:15-alpine
    container_name: wbjj_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wbjj_dev}
      POSTGRES_USER: ${POSTGRES_USER:-wbjj_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wbjj_pass}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - wbjj_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wbjj_user} -d ${POSTGRES_DB:-wbjj_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: wbjj_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - wbjj_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: wbjj_backend
    restart: unless-stopped
    command: >
      sh -c "
        uv run python manage.py wait_for_db &&
        uv run python manage.py migrate &&
        uv run python manage.py collectstatic --noinput &&
        uv run python manage.py seed_data &&
        uv run python manage.py runserver 0.0.0.0:8000
      "
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-dev-key}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-wbjj_user}:${POSTGRES_PASSWORD:-wbjj_pass}@db:5432/${POSTGRES_DB:-wbjj_dev}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_pass}@redis:6379/0
      - DOCKER_CONTAINER=true
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${DJANGO_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wbjj_network

  # Opcional: Adminer para gerenciar banco via web
  adminer:
    image: adminer:latest
    container_name: wbjj_adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    depends_on:
      - db
    networks:
      - wbjj_network
    environment:
      ADMINER_DEFAULT_SERVER: db

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  wbjj_network:
    driver: bridge
